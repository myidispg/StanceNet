# -*- coding: utf-8 -*-
"""
Created on Thu Jul 25 09:42:17 2019

@author: myidispg
"""

import numpy as np
import cv2
import os

from utilities.constants import dataset_dir
from utilities.helper import get_image_name
from data_process.process_functions import do_affine_transform

def draw_skeleton(image_id, all_keypoints, skeleton_limb_indices,
                  wait_time = 0, val=False):
    """
    Given the image_id and keypoints of the image, draws skeleton accordingly.
    Inputs:
        image_id: The id of the image as per the dataset.
        all_keypoints: A 2d list with keypoints of size: (num_people, 51)
                   Here, 51 is for the keyppoints in a single person.
        skeleton_limb_indices: The joint indices to make connections from 
                               keypoints to make a skeleton. Defined in constants.
        val: True is using validation data. False by default.

    Outputs: None. Only shows the image.                       
    """
    
    image_name = get_image_name(image_id)
   
    if val:
        image_path = os.path.join(dataset_dir, 
                                    'new_val2017', 
                                    image_name)
    else:
        image_path = os.path.join(dataset_dir,
                                  'new_train2017',
                                  image_name)
    
#    print(image_path)
    
    img = cv2.imread(image_path, cv2.IMREAD_COLOR)
    
    # For each keypoint in keypoints, draw the person.
    for person_keypoints in all_keypoints:
        
        # Display joints
        for keypoint in person_keypoints:
            if keypoint[2] != 0:
                cv2.circle(img, (keypoint[0], keypoint[1]), 0, (0, 255, 255), 6)
        
        # Draw limbs for the visible joints
        # Note: 1 is subtracted because indices start from 0.
        for joint_index in skeleton_limb_indices:
            if person_keypoints[joint_index[0]-1][2] != 0:
                if person_keypoints[joint_index[1]-1][2] != 0:
                    x1 = person_keypoints[joint_index[0]-1][0]
                    y1 = person_keypoints[joint_index[0]-1][1]
                    x2 = person_keypoints[joint_index[1]-1][0]
                    y2 = person_keypoints[joint_index[1]-1][1]
                    cv2.line(img, (x1, y1), (x2, y2), (255, 0, 0), 2)

                
    cv2.imshow('image', img)
    cv2.waitKey(wait_time)
    cv2.destroyAllWindows()
    
def process_output_conf_map(image, scale_factor=4):
    """
    Returns the heatmap generated by model output is a visualizable form.
    Inputs:
        image: The heatmap generated by the model. Must be of shape:
            (batch, num_joints, im_width, im_height)
        scale_factor: The factor by which to enlarge the heatmap. Default=4
    """
    
    conf = np.zeros((image.shape[2], image.shape[3]))
    image = image.reshape(image.shape[2], image.shape[3], 1)
    for i in range(17):
        conf += image[:, :, i]
        
    conf = do_affine_transform(image, scale_factor)
    return conf
