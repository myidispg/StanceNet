# -*- coding: utf-8 -*-
"""
Created on Sun Jul 21 18:33:28 2019

@author: myidispg
"""

import os
import torch
import cv2

import numpy as np

from pycocotools.coco import COCO

from models.full_model import OpenPoseModel

import utilities.constants as constants
import utilities.helper as helper
from training_utilities.train_utils import train_epoch, train
from training_utilities.stancenet_dataset import StanceNetDataset

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

print('Loading training COCO Annotations used for mask generation. Might take time.')
#coco_train = COCO(os.path.join(os.path.join(os.getcwd(), 'Coco_Dataset'),
#                       'annotations', 'person_keypoints_train2017.json'))
coco_val = COCO(os.path.join(os.path.join(os.getcwd(), 'Coco_Dataset'),
                       'annotations', 'person_keypoints_val2017.json'))
print('Annotation load complete.')

#train_data = StanceNetDataset(coco_train, os.path.join(constants.dataset_dir,
#                                                       'train2017'))
val_data = StanceNetDataset(coco_val, os.path.join(constants.dataset_dir,
                                                       'val2017'))

#train_dataloader = torch.utils.data.DataLoader(train_data, batch_size=1,
#                                               shuffle=True)
val_dataloader = torch.utils.data.DataLoader(val_data, batch_size=1,
                                               shuffle=True)
status = train(val_dataloader, device, num_epochs=5, val_every=False,
               print_every=50, resume=False)
if status == None:
    print('There was some issue in the training process. Please check.')

from models.paf_model_v2 import StanceNet
model = StanceNet(n_joints=constants.num_joints,
                      n_limbs = constants.num_limbs*2).to(device)
input_  = torch.from_numpy(np.zeros((1, 3, 400, 400))).float().to(device)
outputs = model(input_)

def process_output_conf_map(image, scale_factor=4):
    """
    Returns the heatmap generated by model output is a visualizable form.
    Inputs:
        image: The heatmap generated by the model. Must be of shape:
            (batch, num_joints, im_width, im_height)
        scale_factor: The factor by which to enlarge the heatmap. Default=4
    """
    
    from utilities.helper import do_affine_transform
    
    print(image.shape)
    
    conf = np.zeros((image.shape[2], image.shape[3]))
    image = image.reshape(image.shape[2], image.shape[3], 17)
    for i in range(17):
        conf += image[:, :, i]
        
    conf = do_affine_transform(image, scale_factor)
    return conf

def visualize_output_conf_map(conf_map):
    """
    Visualizes a conf map using OpenCV.
    Inputs:
        conf_map: The conf_map to be visualized. Needs to be of the shape:
            (1, num_joints, width, height)
    """
    conf_map = process_output_conf_map(conf_map)
    cv2.imshow('COnfidence Map',conf_map)
    cv2.waitKey()
    cv2.destroyAllWindows()
